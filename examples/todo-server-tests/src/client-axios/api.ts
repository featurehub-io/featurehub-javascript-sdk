/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Todo
 * Sample todo-api
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore

import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

/**
 *
 * @export
 * @interface Todo
 */
export interface Todo {
  /**
   *
   * @type {string}
   * @memberof Todo
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Todo
   */
  title?: string;
  /**
   *
   * @type {boolean}
   * @memberof Todo
   */
  resolved?: boolean;
  /**
   *
   * @type {string}
   * @memberof Todo
   */
  when?: string;
}

/**
 * TodoServiceApi - axios parameter creator
 * @export
 */
export const TodoServiceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary addTodo
     * @param {string} user
     * @param {Todo} [todo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addTodo: async (user: string, todo?: Todo, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'user' is not null or undefined
      assertParamExists("addTodo", "user", user);
      const localVarPath = `/todo/{user}`.replace(`{${"user"}}`, encodeURIComponent(String(user)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        todo,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary listTodos
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTodos: async (user: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'user' is not null or undefined
      assertParamExists("listTodos", "user", user);
      const localVarPath = `/todo/{user}`.replace(`{${"user"}}`, encodeURIComponent(String(user)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary removeAll
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllTodos: async (user: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'user' is not null or undefined
      assertParamExists("removeAllTodos", "user", user);
      const localVarPath = `/todo/{user}`.replace(`{${"user"}}`, encodeURIComponent(String(user)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary removeTodo
     * @param {string} user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeTodo: async (user: string, id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'user' is not null or undefined
      assertParamExists("removeTodo", "user", user);
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeTodo", "id", id);
      const localVarPath = `/todo/{user}/{id}`
        .replace(`{${"user"}}`, encodeURIComponent(String(user)))
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary resolveTodo
     * @param {string} id
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveTodo: async (id: string, user: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("resolveTodo", "id", id);
      // verify required parameter 'user' is not null or undefined
      assertParamExists("resolveTodo", "user", user);
      const localVarPath = `/todo/{user}/{id}/resolve`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"user"}}`, encodeURIComponent(String(user)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TodoServiceApi - functional programming interface
 * @export
 */
export const TodoServiceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TodoServiceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary addTodo
     * @param {string} user
     * @param {Todo} [todo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addTodo(
      user: string,
      todo?: Todo,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addTodo(user, todo, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary listTodos
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTodos(
      user: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listTodos(user, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary removeAll
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeAllTodos(
      user: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeAllTodos(user, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary removeTodo
     * @param {string} user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeTodo(
      user: string,
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeTodo(user, id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary resolveTodo
     * @param {string} id
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resolveTodo(
      id: string,
      user: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.resolveTodo(id, user, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * TodoServiceApi - factory interface
 * @export
 */
export const TodoServiceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TodoServiceApiFp(configuration);
  return {
    /**
     *
     * @summary addTodo
     * @param {string} user
     * @param {Todo} [todo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addTodo(user: string, todo?: Todo, options?: any): AxiosPromise<Array<Todo>> {
      return localVarFp.addTodo(user, todo, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary listTodos
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTodos(user: string, options?: any): AxiosPromise<Array<Todo>> {
      return localVarFp.listTodos(user, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary removeAll
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllTodos(user: string, options?: any): AxiosPromise<void> {
      return localVarFp.removeAllTodos(user, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary removeTodo
     * @param {string} user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeTodo(user: string, id: string, options?: any): AxiosPromise<Array<Todo>> {
      return localVarFp.removeTodo(user, id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary resolveTodo
     * @param {string} id
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveTodo(id: string, user: string, options?: any): AxiosPromise<Array<Todo>> {
      return localVarFp.resolveTodo(id, user, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * TodoServiceApi - object-oriented interface
 * @export
 * @class TodoServiceApi
 * @extends {BaseAPI}
 */
export class TodoServiceApi extends BaseAPI {
  /**
   *
   * @summary addTodo
   * @param {string} user
   * @param {Todo} [todo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoServiceApi
   */
  public addTodo(user: string, todo?: Todo, options?: any) {
    return TodoServiceApiFp(this.configuration)
      .addTodo(user, todo, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary listTodos
   * @param {string} user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoServiceApi
   */
  public listTodos(user: string, options?: any) {
    return TodoServiceApiFp(this.configuration)
      .listTodos(user, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary removeAll
   * @param {string} user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoServiceApi
   */
  public removeAllTodos(user: string, options?: any) {
    return TodoServiceApiFp(this.configuration)
      .removeAllTodos(user, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary removeTodo
   * @param {string} user
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoServiceApi
   */
  public removeTodo(user: string, id: string, options?: any) {
    return TodoServiceApiFp(this.configuration)
      .removeTodo(user, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary resolveTodo
   * @param {string} id
   * @param {string} user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoServiceApi
   */
  public resolveTodo(id: string, user: string, options?: any) {
    return TodoServiceApiFp(this.configuration)
      .resolveTodo(id, user, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
